// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: transaction.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TxHandlerClient is the client API for TxHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TxHandlerClient interface {
	// Get a stream of transactions with a greater value than
	// float argument
	GetTransactions(ctx context.Context, in *Value, opts ...grpc.CallOption) (TxHandler_GetTransactionsClient, error)
}

type txHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewTxHandlerClient(cc grpc.ClientConnInterface) TxHandlerClient {
	return &txHandlerClient{cc}
}

func (c *txHandlerClient) GetTransactions(ctx context.Context, in *Value, opts ...grpc.CallOption) (TxHandler_GetTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &TxHandler_ServiceDesc.Streams[0], "/TxHandler/GetTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &txHandlerGetTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TxHandler_GetTransactionsClient interface {
	Recv() (*Tx, error)
	grpc.ClientStream
}

type txHandlerGetTransactionsClient struct {
	grpc.ClientStream
}

func (x *txHandlerGetTransactionsClient) Recv() (*Tx, error) {
	m := new(Tx)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TxHandlerServer is the server API for TxHandler service.
// All implementations must embed UnimplementedTxHandlerServer
// for forward compatibility
type TxHandlerServer interface {
	// Get a stream of transactions with a greater value than
	// float argument
	GetTransactions(*Value, TxHandler_GetTransactionsServer) error
	mustEmbedUnimplementedTxHandlerServer()
}

// UnimplementedTxHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedTxHandlerServer struct {
}

func (UnimplementedTxHandlerServer) GetTransactions(*Value, TxHandler_GetTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (UnimplementedTxHandlerServer) mustEmbedUnimplementedTxHandlerServer() {}

// UnsafeTxHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TxHandlerServer will
// result in compilation errors.
type UnsafeTxHandlerServer interface {
	mustEmbedUnimplementedTxHandlerServer()
}

func RegisterTxHandlerServer(s grpc.ServiceRegistrar, srv TxHandlerServer) {
	s.RegisterService(&TxHandler_ServiceDesc, srv)
}

func _TxHandler_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Value)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TxHandlerServer).GetTransactions(m, &txHandlerGetTransactionsServer{stream})
}

type TxHandler_GetTransactionsServer interface {
	Send(*Tx) error
	grpc.ServerStream
}

type txHandlerGetTransactionsServer struct {
	grpc.ServerStream
}

func (x *txHandlerGetTransactionsServer) Send(m *Tx) error {
	return x.ServerStream.SendMsg(m)
}

// TxHandler_ServiceDesc is the grpc.ServiceDesc for TxHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TxHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TxHandler",
	HandlerType: (*TxHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _TxHandler_GetTransactions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "transaction.proto",
}
